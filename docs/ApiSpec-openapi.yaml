---
openapi: 3.0.1
info:
  title: OcrProject
  version: 1.0.0 
paths:
  /documents:
    post:
      operationId: uploadDocument
      summary: Upload a new document to the system
      description: 'This endpoint will ingest new letters into the system and process them. Individual Images can be uploaded in jpeg, png, tiff or pdf format.
                    Multiple images of any combination of these types can be uploaded at once by compressing them in a zip file.
                    Multi-page letters may be merged as a single large file (with pages oriented vertically), or as multiple images, with the page number being the filename.
                    To upload multi-page letters, the images for that letter must be inside a folder in the .zip archive, with the name of the folder being the document name.
                    If a scan of the envelope is included, it must be separated from the normal letter as a separate file named "envelope.&lt;format&gt;" and uploaded using
                    the multi-image letter format described above.'
      requestBody:
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          image/tiff:
            schema:
              type: string
              format: binary
          application/pdf:
              schema:
                type: string
                format: binary
          application/zip:
            schema:
              type: string
              format: binary
      responses:
        202:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentUploadResponse'
        415:
          description: Client attempted to upload an unsupported file type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /documents/jobs/{id}:
    get:
      operationId: getDocumentJob
      summary: Job status
      parameters:
      - name: id
        in: path
        description: 'The unique ID of the job being queried. '
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        404:
          description: This job does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /documents/{id}:
    get:
      operationId: getDocumentMetadata
      summary: Get document metadata
      description: Get extracted metadata about a document
      parameters:
      - name: id
        in: path
        description: The unique ID of the document
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      operationId: updateDocumentMetadata
      summary: Update document metadata
      description: Update metadata about a document. Any field specified in the body will overwrite the existing data. 
      parameters:
      - name: id
        in: path
        description: The unique ID of the document
        required: true
        schema:
          type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateDocumentRequest'

      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        400:
          description: One or more of the parameters was malformed. If this is returned, no change will be made. The error "message" field will provide details about what went wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /documents/search:
    get:
      operationId: searchDocuments
      summary: Search documents
      description: Users can search via arbitrary keywords to return a list of relevant documents
      parameters:
      - name: query
        in: query
        description: The keyword(s) to search for
        required: true
        schema:
          type: string
      - name: pageSize
        in: query
        description: The maximum number of items to return
        required: false
        schema:
          default: 10
          maximum: 50
          type: integer
      - name: page
        in: query
        description: The page number to load
        required: false
        schema:
          default: 0
          minimum: 0
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DocumentResponse'
  /documents/{id}/text:
    get:
      operationId: getDocumentText
      summary: Get document text
      description: Get the text extracted from the document.
      parameters:
      - name: id
        in: path
        description: 'The ID to oad'
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /documents/{id}/image:
    get:
      operationId: getDocumentImage
      summary: Get document image
      description: Get original scanned pages for the document
      parameters:
      - name: id
        in: path
        description: 'The id of the document'
        required: true
        schema:
          type: integer
      - name: page
        in: query
        description: 'The page to load'
        required: false
        schema:
          type: integer
          default: 0
          minimum: 0
      - name: envelope
        in: query
        description: 'This flag parameter indicates that the image of the envelope should be returned, instead of a page. This field is mutually exclusive with the page parameter. If both are specified,
                      then the envelope will be returned and the page is ignored..'
        required: false
      responses:
        200:
          description: OK
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/tiff:
              schema:
                type: string
                format: binary
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    DisputeQueue:
      type: string
      enum:
        - FRAUD
        - VALIDATION
        - GENERAL
        - INQUIRIES
        - UNASSIGNED
    Job:
      description: This object describes the status of an asynchronous task.
      required:
      - jobId
      - status
      type: object
      properties:
        jobId:
          format: integer
          description: A unique ID for the job
          type: integer
        status:
          description: The status of the job.
          type: string
          default: pending
          enum: [pending, processing, completed, error]
        document:
          description: An ID that references the processed document. Null if the job
            is not completed yet.
          type: integer
      example: |-
        {
            "jobId": 1234,
            "status": "completed"
            "document": "4321"
        }
    DocumentUploadResponse:
      description: This object contains IDs for an uploaded document, and associated job ids for pages in the document
      required:
      - documentId
      - jobIds
      type: object
      properties:
       documentId:
         format: integer
         description: the id of the uploaded document
       jobIds:
         format: integer
         type: array
      example: |-
        {
            "documentId": 72,
            "jobIds": [
                60,
                61
            ]
        }
    Error:
      description: 'This object is returned when an error (non-2xx response codde)
        occurs. '
      required:
      - message
      - status
      properties:
        message:
          description: A brief message describing the error
          type: string
        status:
          description: A copy of the HTTP status code returned by the request.
          type: integer
      example: |-
        {
          "message": "Some message",
          "status": 123
        }

    Address:
      description: 'A street address'
      required:
        - firstLine
        - city
        - state
        - country
      properties:
        firstLine:
          type: string
        secondLine:
          type: string
        city:
          type: string
        state:
          description: "State/province/region"
          type: string
        zipCode:
          type: string
        country:
          type: string
      example: |-
        {
          firstLine: "1600 Pennsylvania Ave.",
          state: "Washington D.C.",
          zipCode: "20500"
        }
    DocumentResponse:
      description: Metadata that has been extracted from an uploaded document'
      properties:
        id:
          description: The name of the document
          type: integer
        accountNumber:
          description: The account number related to this document
          type: string
        address:
          $ref: '#/components/schemas/Address'
        ssn:
          type: string
          pattern: '^[0-9]{3}-[0-9]{2}-[0-9]{4}$'
        dateOfBirth:
          description: 'A UNIX timestamp in seconds representing a date'
          type: integer
        letterDate:
          description: 'A UNIX timestamp in seconds representing a date'
          type: integer
        postmarkDate:
          description: 'A UNIX timestamp in seconds representing a date'
          type: integer

        numSimilarDocuments:
          description: "The number of documents that are substantially similar to this one. A high number here indicates that 
                        the document is likely based off of a template."
          type: integer
          minimum: 0
        numPages:
          description: 'The number of pages in the document'
          type: integer
          minimum: 0
        hasEnvelope:
          type: boolean
        disputeQueue:
          description: "The dispute queue to assign the document to."
          type: string
          oneOf:
            - $ref: '#/components/schemas/DisputeQueue'
    UpdateDocumentRequest:
      description: 'A set of optional fields to update specific fields in for a document'
      properties:
        accountNumber:
          description: "The customer's 17-digit account number"
          type: integer
        address:
          $ref: '#/components/schemas/Address'
        ssn:
          type: string
          pattern: '^[0-9]{3}-[0-9]{2}-[0-9]{4}$'
        dateOfBirth:
          description: 'A UNIX timestamp in seconds representing a date'
          type: integer
        letterDate:
          description: 'A UNIX timestamp in seconds representing a date'
          type: integer
        postmarkDate:
          description: 'A UNIX timestamp in seconds representing a date'
          type: integer
        disputeQueue:
          description: "The dispute queue to assign the document to."
          type: string
          oneOf:
            - $ref: '#/components/schemas/DisputeQueue'
