---
openapi: 3.0.1
info:
  title: OcrProject
  version: 1.0.0 
  contact:
    url: https://pfoster.me
    name: Philip Foster
    email: philip@pfoster.me
paths:
  /documents:
    post:
      operationId: uploadDocument
      summary: Upload a new document to the system
      description: 'This endpoint will ingest new letters into the system and process them. Individual Images can be uploaded in 
      jpeg, or png format. Multiple images can be uploaded at once by compressing them in a zip file. '
      requestBody:
        content:
          image/jpeg:
            schema:
              type: string
              format: binary
          image/png:
            schema:
              type: string
              format: binary
          application/zip:
            schema:
              type: string
              format: binary
      responses:
        202:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
  /documents/jobs/{id}:
    get:
      operationId: getDocumentJob
      summary: Job status
      parameters:
      - name: id
        in: path
        description: 'The unique ID of the job being queried. '
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Job'
        404:
          description: This job does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /documents/{id}:
    get:
      operationId: getDocumentMetadata
      summary: Get document metadata
      description: Get extracted metadata about a document
      parameters:
      - name: id
        in: path
        description: The unique ID of the document
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      operationId: updateDocumentMetadata
      summary: Update document metadata
      description: Update metadata about a document. Any field specified in the body will overwrite the existing data. 
      parameters:
      - name: id
        in: path
        description: The unique ID of the document
        required: true
        schema:
          type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema: 
              type: object
              properties:
                accountNumber:
                  type: string
                address:
                  type: object
                  oneOf:
                    - $ref: '#/components/schemas/Address'
                ssn:
                  type: string
                  pattern: '^[0-9]{3}-[0-9]{2}-[0-9]{4}$'
                dateOfBirth:
                  $ref: '#/components/schemas/Date'
                letterDate:
                  $ref: '#/components/schemas/Date'
                postmarkDate:
                  $ref: '#/components/schemas/Date'
                addQueues:
                  description: "A list of queues to add this document to"
                  type: array
                  items:
                    type: string 
                removeQueues:
                  description: "A list of queues to remove this document from"
                  type: array
                  items:
                    type: string 
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentResponse'
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        400:
          description: One of the parameters was malformd. If this is returned, no change will be made. The error "message" field will provide details about what went wrong.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
            

  /documents/{id}/text:
    get:
      operationId: getDocumentText
      summary: Get document text
      description: Get the text extracted from the document.
      parameters:
      - name: id
        in: path
        description: 'The text read by the OCR engine'
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            text/plain:
              schema:
                type: string
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'          
  /documents/{id}/image:
    get:
      operationId: getDocumentImage
      summary: Get document image
      description: Get the original scanned image for the document
      parameters:
      - name: id
        in: path
        description: 'The text read by the OCR engine'
        required: true
        schema:
          type: integer
      responses:
        200:
          description: OK
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
        404:
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'          

components:
  schemas:
    Job:
      description: This object describes the status of an asynchronous task.
      required:
      - jobId
      - document
      type: object
      properties:
        jobId:
          format: integer
          description: A unique ID for the job
          type: integer
        status:
          description: The status of the job
          type: string
          enum: [pending, completed]
        document:
          description: An ID that references the processed document. Null if the job
            is not completed yet.
          type: integer
      example: |-
        {
            "jobId": 1234,
            "status": "completed"
        }
    Error:
      description: 'This object is returned when an error (non-2xx response codde)
        occurs. '
      required:
      - message
      - status
      properties:
        message:
          description: A brief message describing the error
          type: string
        status:
          description: A copy of the HTTP status code returned by the request.
          type: integer

      example: |-
        {
          "message": "Not found",
          "status": 404
        }
    Address:
      description: 'A street address'
      required:
        - firstLine
        - city
        - state
        - country
      properties:
        firstLine:
          type: string
        secondLine:
          type: string
        city:
          type: string
        state:
          description: "State/province/region"
          type: string
        zipCode:
          type: string
        country:
          type: string
      example: |-
        { 
          firstLine: "1600 Pennsylvania Ave.",
          state: "Washington D.C.",
          zipCode: "20500"
        }
    Date: 
      description: 'A date'

      properties:
        year: 
          type: integer
        month:
          type: string
          enum:
            - January
            - February
            - March
            - April
            - May
            - June
            - July
            - August
            - September
            - October
            - November
            - December
        day: 
          type: integer
          minimum: 1
          maximum: 31
          exclusiveMaximum: false

    DocumentResponse:
      description: Metadata that has been extracted from an uploaded document'
      properties:
        id:
          description: The name of the document
          type: integer
        accountNumber:
          description: The account number related to this document
          type: string
        address:
          $ref: '#/components/schemas/Address'
        ssn:
          type: string
          pattern: '^[0-9]{3}-[0-9]{2}-[0-9]{4}$'
        dateOfBirth:
          $ref: '#/components/schemas/Date'
        letterDate:
          $ref: '#/components/schemas/Date'
        postmarkDate:
          $ref: '#/components/schemas/Date'
        numSimilarDocuments:
          description: "The number of documents that are substantially similar to this one. A high number here indicates that 
                        the document is likely based off of a template."
          type: integer
          minimum: 0
        queues:
          description: "A list of queues that the system believes the document should be sorted into"
          type: array
          items:
            type: string
          


        